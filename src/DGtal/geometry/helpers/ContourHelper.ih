/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ContourHelper.ih
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2011/05/02
 *
 * Implementation of inline methods defined in ContourHelper.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //



template <typename TPoint> 
inline
TPoint
DGtal::ContourHelper::getMeanPoint(const std::vector<TPoint> & aContour)
{
  TPoint ptMean;
  for(unsigned int i =0; i<aContour.size(); i++)
    {
      ptMean[0]+=aContour.at(i)[0];
      ptMean[1]+=aContour.at(i)[1];
    }
  ptMean[0] /= aContour.size();
  ptMean[1] /= aContour.size();
  return ptMean; 
}



  
template<typename TPoint>
inline
unsigned int 
DGtal::ContourHelper::getFreemanCode4C(const TPoint &pt1, const TPoint &pt2)
{
  int dx = pt2[0] - pt1[0];
  int dy = pt2[1] - pt1[1];
  if(dx==1 && dy ==0)
    {
      return 0;
    }
  else if(dx==0 && dy==1)
    {
      return 1;
    }
  else if(dx==-1 && dy ==0)
    {
      return 2;
    }
  else if(dx==0 && dy ==-1)
    {
      return 3;
    }
  else
    return 8;
}



template <typename TConstIterator, typename TOutputIterator>
inline
void 
DGtal::ContourHelper::pixels2pixels8C(const TConstIterator &itb, const TConstIterator &ite,
                                      TOutputIterator out)
{
  int xCurrent = (*itb)[0];
  int yCurrent = (*ite)[1];
  TConstIterator it = itb;
  *out++ = *it;
  unsigned int size = std::distance(itb, ite);
  int i=0;
  while(i<size-1)
    {
      unsigned int code = ContourHelper::getFreemanCode4C(*it, *(it+1));
      unsigned int codeNext = ContourHelper::getFreemanCode4C(*(it+1), *(it+2));
      
      if((code != 8 && codeNext != 8) &&  (((4+(int)codeNext-(int)code)%4)==1 || ((4+(int)codeNext-(int)code)%4)==3))
        {
          it++;
          i++;
        } 
      it++;
      *out++ = *it;     
      i++;
    }
}




template <typename TPoint> 
inline
bool
DGtal::ContourHelper::isCounterClockWise(const std::vector<TPoint> & aContour)
{
  double sum=0.0;
  TPoint p0 = *(aContour.begin());
  typename std::vector<TPoint>::const_iterator itContour = aContour.begin();
  itContour++;
  TPoint p=*itContour;
  itContour++;
  for( ; itContour!=aContour.end(); itContour++)
    {
      TPoint pSuiv = *itContour;
      typename TPoint::Coordinate v1x = p[0] - p0[0];
      typename TPoint::Coordinate v1y = p[1] - p0[1];
      typename TPoint::Coordinate v2x = pSuiv[0] - p[0];
      typename TPoint::Coordinate v2y = pSuiv[1] - p[1];
      sum+=(v1x*v2y)-(v2x*v1y);
      p=pSuiv;
    }
  return (sum>0.0);
}





///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'ContourHelper'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'ContourHelper' to write.
 * @return the output stream after the writing.
 */
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const ContourHelper & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


