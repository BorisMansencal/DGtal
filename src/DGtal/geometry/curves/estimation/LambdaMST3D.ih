/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file LambdaMST3D.ih
 * @author Kacper Pluta (\c kacper.pluta@esiee.fr )
 * Laboratoire d'Informatique Gaspard-Monge - LIGM, France
 *
 * @date 2014/10/06
 *
 * This file is part of the DGtal library.
 */

namespace DGtal
{

  template < typename TSpace, typename TSegmentation, typename Functor >
  inline
  LambdaMST3DEstimator< TSpace, TSegmentation, Functor >::LambdaMST3DEstimator() : myBegin(), myEnd(), dssSegments ( 0 ), myFunctor() {}


  template < typename TSpace, typename TSegmentation, typename Functor >
  inline
  void
  LambdaMST3DEstimator< TSpace, TSegmentation, Functor >::init ( ConstIterator itb, ConstIterator ite )
  {
    myBegin = itb;
    myEnd = ite;
  }

  template < typename TSpace, typename TSegmentation, typename Functor >
  inline
  void
  LambdaMST3DEstimator< TSpace, TSegmentation, Functor >::attach ( Alias<TSegmentation> segmentComputer )
  {
    dssSegments = &segmentComputer;
  }

  template < typename TSpace, typename TSegmentation, typename Functor >
  inline
  bool
  LambdaMST3DEstimator< TSpace, TSegmentation, Functor >::isValid () const
  {
    return ( dssSegments != 0 );
  }

  template < typename TSpace, typename TSegmentation, typename Functor >
  inline
  typename LambdaMST3DEstimator< TSpace, TSegmentation, Functor >::RealVector
  LambdaMST3DEstimator< TSpace, TSegmentation, Functor >::eval( const Point & p )
  {
    assert ( isValid() );
    typename TSegmentation::SegmentComputerIterator DSS = dssSegments->begin();
    typename TSegmentation::SegmentComputerIterator lastDSS = dssSegments->end();
    Value tangent, partial, prev;
  
    for ( ; DSS != lastDSS; ++DSS )
    {
      if ( DSS->isInDSS ( p ) )
      {
        auto dssLen = std::distance ( DSS.begin(), DSS.end() ) + 1;
        prev = partial;
        auto pos = std::distance ( DSS.begin(), std::find ( DSS.begin(), DSS.end(), p ) ) + 1;
        SegmentComputer comp ( *DSS );
        partial = myFunctor ( comp, pos, dssLen );
        if ( prev.first.cosineSimilarity ( partial.first ) > M_PI_2 )
	      partial.first = -partial.first;
      tangent += partial;
      }
    }
    if ( tangent.second != 0. )
      return tangent.first / tangent.second;
    else
      return tangent.first;
  }

  template < typename TSpace, typename TSegmentation, typename Functor >
  template < typename OutputIterator >
  inline
  OutputIterator
  LambdaMST3DEstimator< TSpace, TSegmentation, Functor >::eval ( ConstIterator itb, ConstIterator ite,
                                                                 OutputIterator result )
  {
    assert ( myBegin != myEnd && isValid() && myBegin <= itb && ite <= myEnd && itb != ite );
    std::multimap < Point, Value > outValues;
    dssSegments->setSubRange ( itb, ite );
    typename TSegmentation::SegmentComputerIterator DSS = dssSegments->begin();
    typename TSegmentation::SegmentComputerIterator lastDSS = dssSegments->end();
  
    for(; DSS != lastDSS; ++DSS)
    {
      auto dssLen = std::distance ( DSS.begin(), DSS.end() );
      SegmentComputer comp ( *DSS );
      for ( unsigned int indexOfPointInDSS = 0; indexOfPointInDSS < dssLen; indexOfPointInDSS++ )
        outValues.insert ( std::make_pair ( *(DSS.begin() + indexOfPointInDSS), myFunctor ( comp, indexOfPointInDSS+1, dssLen+1 ) ) );
    }
    accumulate< OutputIterator >( outValues, itb, ite, result );
    return result;
  }

  template < typename TSpace, typename TSegmentation, typename Functor >
  template <typename OutputIterator>
  inline
  void
  LambdaMST3DEstimator< TSpace, TSegmentation, Functor >::accumulate ( std::multimap < Point, Value > & outValues,
                                                                       ConstIterator itb, ConstIterator ite,
                                                                       OutputIterator & result )
  {
    Value prev = outValues.lower_bound( *itb )->second;
    Value accum_prev = outValues.lower_bound( *itb )->second;
    for ( ConstIterator itt = itb; itt != ite; ++itt )
    {
      typename std::multimap< Point, Value >::const_iterator it  = outValues.lower_bound ( *itt );
      typename std::multimap< Point, Value >::const_iterator it2 = outValues.upper_bound ( *itt );
      Value tangent;
      for (; it != it2; it++ )
      {
        Value partial = it->second;
        if (  prev.first.cosineSimilarity ( partial.first ) > M_PI_2 )
	      partial.first = -partial.first;
        prev = partial;
        tangent += partial;
      }
      outValues.erase ( *itt );
      // avoid tangent flapping
      if (  accum_prev.first.cosineSimilarity ( tangent.first ) > M_PI_2 )
      {
        tangent.first = -tangent.first;
        accum_prev = tangent;
      }
      if ( tangent.second != 0 )
        *result++ = ( tangent.first / tangent.second );
      else
        *result++ = tangent.first;
    }
  }
}