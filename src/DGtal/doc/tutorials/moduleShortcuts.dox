
/* 
 * Useful to avoid writing DGtal:: in front of every class.
 */
namespace DGtal {

/**
   
@page moduleShortcuts  Shortcuts (for the impatient developper)

@writers Jacques-Olivier Lachaud

@since 1.0

Part of the \ref packageTutorials.
  
This part of the manual describes how to use shortcuts to quickly
create shapes and surfaces, and to analyze their geometry.

[TOC]


The following programs are related to this documentation:
shortcuts.cpp.

@section dgtal_shortcuts_sec1 Introduction

To use shortcuts, you must include the following header:

\code
#include "DGtal/helpers/Shortcuts.h"
\endcode

And choose an appropriate Khalimsky space according to the dimension
of the object you will be processing.

\code
// Using standard 3D digital space.
typedef Shortcuts<Z3i::KSpace> SH3;
\endcode

The general philosophy of the shorcut module is to choose reasonnable
data structures so as to minimize the number of lines to build
frequent digital geometry code. For instance, the following lines
builds a shape that represents the digitization of an ellipsoid.

\code
  auto params = SH3::defaultParameters();
  // Set your own parameters with operator().
  params( "polynomial", "3*x^2+2*y^2+z^2-90" )( "gridstep", 0.25 );
  auto implicit_shape  = SH3::makeImplicitShape( params );
  auto kspace          = SH3::makeKSpaceShapeDigitization( params );
  auto digitized_shape = SH3::makeShapeDigitization( implicit_shape, params );
  std::cout << *digitized_shape << std::endl;
\endcode

As one can see, a Parameters object stores parameter values and can be
simply updated by the user with the function operator().

Big objects (like images, shapes, surfaces) are always returned or
passed as smart pointers (with CountedPtr). Hence you do not have to
take care of their life-length and you do not need to delete them
explicitly.


@section dgtal_shortcuts_sec2 Short examples

We give below some minimalistic examples to show that shortcuts can
save a lot of lines of code.

@subsection dgtal_shortcuts_ssec2_1 Build Polynomial shape -> digitize -> noisify -> save as vol file.

\code
  auto params          = SH3::defaultParameters();
  // Set your own parameters with operator().
  params( "polynomial", "3*x^2+2*y^2+z^2-90" )
        ( "gridstep", 0.25 )
        ( "noise", 0.3 );
  auto implicit_shape  = SH3::makeImplicitShape    ( params );
  auto digitized_shape = SH3::makeShapeDigitization( implicit_shape, params );
  auto noisy_shape     = SH3::makeBinaryImage      ( digitized_shape, params );
  auto ok              = SH3::saveBinaryImage      ( digitized_shape, "noisy-ellipsoid.vol" );
\endcode 

@subsection dgtal_shortcuts_ssec2_2 Load vol file -> noisify -> save as vol file.

\code
  auto params    = SH3::defaultParameters();
  params( "noise", 0.3 );
  // load and noisify image directly.
  auto al_capone = SH3::makeBinaryImage( examplesPath + "samples/Al.100.vol", params );
  auto ok        = SH3::saveBinaryImage( al_capone, "noisy-Al.vol" );
\endcode 


@section dgtal_shortcuts_sec3 Philosophy and naming conventions

Commands are constructed as \b prefix + \b type name. Most of them are
static methods and are overloaded to accept different set of
parameters. 

@subsection dgtal_shortcuts_ssec3_1 Prefixes 

- \b make + `Type`: means that it will create a new object of type
  `Type` and returns it as a \e smart \e pointer onto it. Depending on
  parameters, \b make can \b load a file, \b copy and \b transform an
  object, \b build an empty/not object according to parameters.

- \b save + `Type`: means that it will save the pointed object of type `Type` as a file.

- \b parameters + `Type`: returns the Parameters object associated to
  the creation/copy/load of the given `Type`.

- \b get + `Type`: means that it will return \e by \e value an object of type `Type`.

@subsection dgtal_shortcuts_ssec3_2 Types

The following name conventions for types are used:

- Shortcuts::Point: represents a point with integer coordinates.
- Shortcuts::Vector: represents a vector with integer coordinates.
- Shortcuts::RealPoint: represents a point with floating-point coordinates.
- Shortcuts::RealVector: represents a vector with floating-point coordinates.
- Shortcuts::Domain: represents an (hyper-)rectangular digital domain.
- Shortcuts::Integer: represents integer numbers (for Point coordinates and Vector components) 
- Shortcuts::Space: represents a digital space (generally a SpaceND)
- Shortcuts::KSpace: represents a cellular grid space (generally a KhalimskySpaceND)

- Shortcuts::ImplicitShape: represents a functor RealPoint -> Scalar which adds
  geometry services: isInside, orientation, gradient, meanCurvature,
  GaussianCurvature, principalCurvatures, nearestPoint

- Shortcuts::ShapeDigitization: represents the digitization of an
  ImplicitShape as a predicate Point -> bool (isInside), and adds some
  services: getLowerBound, getUpperBound, embed, round, getDomain,
  gridSteps, resolution. Note that pixels/voxels are not stored
  explicitly, so the resolution may be arbirary high.

- Shortcuts::BinaryImage: represents a black and white image as an array of
  bits. It is generally a faster representation of a predicate Point
  -> bool than an implicit digital shape.

- Shortcuts::GrayScaleImage: represents an 8-bits gray-scale image as an array of
  bytes (unsigned char). 

@subsection dgtal_shortcuts_ssec3_3 Main methods

-# General methods
  - Shortcuts::defaultParameters: return the set of all shorcut parameters.
-# ImplicitShape methods
  - Shortcuts::getPolynomialList: return the list of polynomial shapes predefined for implicit shapes 
  - Shortcuts::parametersImplicitShape: parameters related to implicit shapes (polynomial)
  - Shortcuts::makeImplicitShape: builds an implicit shape
-# KSpace methods
  - Shortcuts::parametersKSpace: parameters related to Khalimsky spaces (closed)
  - Shortcuts::getKSpace: builds a Khalimsky space from a domain.
  - Shortcuts::getKSpaceShapeDigitization: builds a Khalimsky space from a shape digitization.
-# ShapeDigitization methods
  - Shortcuts::parametersShapeDigitization: parameters related to shape digitization (bounding box, sampling)
  - Shortcuts::makeShapeDigitization: digitizes an implicit shape.
  - Shortcuts::getKSpaceShapeDigitization: builds a Khalimsky space associated to a shape digitization.
-# BinaryImage methods
  - Shortcuts::parametersBinaryImage: parameters related to binary images (noise, threshold).
  - Shortcuts::makeBinaryImage: many overloaded methods for creating from scratch, vectorizing shape digitization, loading, copying/noisifying binary images, thresholding gray-scale images.
  - Shortcuts::saveBinaryImage: saves a binary image to a file.
-# GrayScaleImage methods
  - Shortcuts::makeGrayScaleImage: overloaded methods for creating from scratch or from binary image, or for loading gray scale images.
  - Shortcuts::saveGrayScaleImage: save a gray scale image to a file.

@subsection dgtal_shortcuts_ssec3_4 Parameters

Also, methods whose result can be influenced by global parameters are
parameterized through a Parameters object. The simplest way to get
default values is to start with a line:
\code
auto params = Shortcuts<KSpace>::defaultParameters();
\endcode
And then to change your parameter settings with Parameters::operator().


*/

}
