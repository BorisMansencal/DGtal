/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file HalfEdgeDataStructure.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2017/02/03
 *
 * Implementation of inline methods defined in HalfEdgeDataStructure.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
inline
bool
DGtal::HalfEdgeDataStructure::
build( const Size num_vertices, 
       const std::vector<Triangle>& triangles,
       const std::vector<Edge>&     edges )
{
  bool ok = true;
  Arc2FaceIndex de2fi;
  // Visiting triangles to associates faces to arcs.
  FaceIndex fi = 0;
  for( const Triangle& T : triangles )
    {
      auto it01 = de2fi.find( Arc( T.v[0], T.v[1] ) );
      auto it12 = de2fi.find( Arc( T.v[1], T.v[2] ) );
      auto it20 = de2fi.find( Arc( T.v[2], T.v[0] ) );
      if ( ( it01 != de2fi.end() ) || ( it12 != de2fi.end() ) || ( it20 != de2fi.end() ) )
        {
          trace.warning() << "[HalfEdgeDataStructure::build] Some arcs belongs to more than one face. Dropping triangle."
                          << " Triangle (" << T.v[ 0 ] << "," << T.v[ 1 ] << "," << T.v[ 2 ] << ")"
                          << " arc01 " << ( it01 != de2fi.end() ? it01->second : -1 )
                          << " arc12 " << ( it12 != de2fi.end() ? it12->second : -1 )
                          << " arc20 " << ( it20 != de2fi.end() ? it20->second : -1 )
                          << std::endl;
	  ok = false;
          continue;
        }
      de2fi[ Arc( T.v[0], T.v[1] ) ] = fi;
      de2fi[ Arc( T.v[1], T.v[2] ) ] = fi;
      de2fi[ Arc( T.v[2], T.v[0] ) ] = fi;
      fi++;
    }
  // Clearing and resizing data structure to start from scratch and
  // prepare everything.
  clear();
  Size num_edges = edges.size();
  Size num_triangles = triangles.size();
  myVertexHalfEdges.resize( num_vertices, -1 );
  myFaceHalfEdges.resize( num_triangles, -1 );
  myEdgeHalfEdges.resize( num_edges, -1 );
  myHalfEdges.reserve( num_edges*2 );
  // Visiting edges to connect everything.
  for( EdgeIndex ei = 0; ei < num_edges; ++ei )
    {
      const Edge& edge = edges[ ei ];

      // Add the halfedge_t structures to the end of the list.
      const Index he0index = myHalfEdges.size();
      myHalfEdges.push_back( HalfEdge() );
      HalfEdge& he0 = myHalfEdges.back();
      const Index he1index = myHalfEdges.size();
      myHalfEdges.push_back( HalfEdge() );
      HalfEdge& he1 = myHalfEdges.back();

      // The face will be -1 if it is a boundary half-edge.
      he0.face = arc2FaceIndex( de2fi, edge.v[0], edge.v[1] );
      he0.toVertex = edge.v[1];
      he0.edge = ei;

      // The face will be -1 if it is a boundary half-edge.
      he1.face = arc2FaceIndex( de2fi, edge.v[1], edge.v[0] );
      he1.toVertex = edge.v[0];
      he1.edge = ei;

      // Store the opposite half-edge index.
      he0.opposite = he1index;
      he1.opposite = he0index;

      // Also store the index in our myArc2Index map.
      assert( myArc2Index.find( Arc( edge.v[0], edge.v[1] ) ) == myArc2Index.end() );
      assert( myArc2Index.find( Arc( edge.v[1], edge.v[0] ) ) == myArc2Index.end() );
      myArc2Index[ std::make_pair( edge.v[0], edge.v[1] ) ] = he0index;
      myArc2Index[ std::make_pair( edge.v[1], edge.v[0] ) ] = he1index;

      // If the vertex pointed to by a half-edge doesn't yet have an out-going
      // halfedge, store the opposite halfedge.
      // Also, if the vertex is a boundary vertex, make sure its
      // out-going halfedge is a boundary halfedge.
      // NOTE: Halfedge data structure can't properly handle butterfly vertices.
      //       If the mesh has butterfly vertices, there will be multiple outgoing
      //       boundary halfedges.  Because we have to pick one as the vertex's outgoing
      //       halfedge, we can't iterate over all neighbors, only a single wing of the
      //       butterfly.
      if( myVertexHalfEdges[ he0.toVertex ] == -1 || -1 == he1.face )
        myVertexHalfEdges[ he0.toVertex ] = he0.opposite;
      if( myVertexHalfEdges[ he1.toVertex ] == -1 || -1 == he0.face )
        myVertexHalfEdges[ he1.toVertex ] = he1.opposite;

      // If the face pointed to by a half-edge doesn't yet have a
      // halfedge pointing to it, store the halfedge.
      if( -1 != he0.face && myFaceHalfEdges[ he0.face ] == -1 )
        myFaceHalfEdges[ he0.face ] = he0index;
      if( -1 != he1.face && myFaceHalfEdges[ he1.face ] == -1 )
        myFaceHalfEdges[ he1.face ] = he1index;

      // Store one of the half-edges for the edge.
      assert( myEdgeHalfEdges[ ei ] == -1 );
      myEdgeHalfEdges[ ei ] = he0index;
    }

  // Now that all the half-edges are created, set the remaining next_he field.
  // We can't yet handle boundary halfedges, so store them for later.
  HalfEdgeIndexRange boundary_heis;
  for( int hei = 0; hei < myHalfEdges.size(); ++hei )
    {
      HalfEdge& he = myHalfEdges.at( hei );
      // Store boundary halfedges for later.
      if( -1 == he.face )
        {
          boundary_heis.push_back( hei );
          continue;
        }

      const Triangle& face = triangles[ he.face ];
      const VertexIndex i  = he.toVertex;
      VertexIndex       j  = -1;
      if( face.v[0] == i ) j = face.v[1];
      else if( face.v[1] == i ) j = face.v[2];
      else if( face.v[2] == i ) j = face.v[0];
      ASSERT( -1 != j );
      he.next = myArc2Index[ Arc( i, j ) ];
    }

  // Make a map from vertices to boundary halfedges (indices)
  // originating from them.  NOTE: There will only be multiple
  // originating boundary halfedges at butterfly vertices.
  std::map< VertexIndex, std::set< Index > > vertex2outgoing_boundary_hei;
  for ( Index hei : boundary_heis )
    {
      const VertexIndex origin_v = myHalfEdges[ myHalfEdges[ hei ].opposite ].toVertex;
      vertex2outgoing_boundary_hei[ origin_v ].insert( hei );
      if( vertex2outgoing_boundary_hei[ origin_v ].size() > 1 )
        {
          trace.error() << "Butterfly vertex encountered." << std::endl;
	  ok = false;
        }
    }

  // For each boundary halfedge, make its next_he one of the boundary halfedges
  // originating at its to_vertex.
  for ( Index hei : boundary_heis )
    {
      HalfEdge& he = myHalfEdges[ hei ];

      std::set< Index >& outgoing = vertex2outgoing_boundary_hei[ he.toVertex ];
      if( !outgoing.empty() )
        {
          std::set< Index >::iterator outgoing_hei = outgoing.begin();
          he.next = *outgoing_hei;
          outgoing.erase( outgoing_hei );
        }
    }

  #ifndef NDEBUG
  for( auto it = vertex2outgoing_boundary_hei.begin();
       it != vertex2outgoing_boundary_hei.end(); ++it )
    {
      ASSERT( it->second.empty() );
    }
  #endif
  return ok;
}

//-----------------------------------------------------------------------------


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
inline
void
DGtal::HalfEdgeDataStructure::selfDisplay ( std::ostream & out ) const
{
  out << "[HalfEdgeDataStructure"
      << " #he=" << myHalfEdges.size()
      << " #V=" << myVertexHalfEdges.size()
      << " #E=" << myEdgeHalfEdges.size()
      << " #F=" << myFaceHalfEdges.size()
      << "]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
inline
bool
DGtal::HalfEdgeDataStructure::isValid() const
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
                    const HalfEdgeDataStructure & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


